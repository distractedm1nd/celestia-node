// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/celestiaorg/celestia-node/share/p2p/peers (interfaces: HeaderSub)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	header "github.com/celestiaorg/celestia-node/header"
	gomock "github.com/golang/mock/gomock"
)

// MockHeaderSub is a mock of HeaderSub interface.
type MockHeaderSub struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderSubMockRecorder
}

// MockHeaderSubMockRecorder is the mock recorder for MockHeaderSub.
type MockHeaderSubMockRecorder struct {
	mock *MockHeaderSub
}

// NewMockHeaderSub creates a new mock instance.
func NewMockHeaderSub(ctrl *gomock.Controller) *MockHeaderSub {
	mock := &MockHeaderSub{ctrl: ctrl}
	mock.recorder = &MockHeaderSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderSub) EXPECT() *MockHeaderSubMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockHeaderSub) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockHeaderSubMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockHeaderSub)(nil).Cancel))
}

// NextHeader mocks base method.
func (m *MockHeaderSub) NextHeader(arg0 context.Context) (*header.ExtendedHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextHeader", arg0)
	ret0, _ := ret[0].(*header.ExtendedHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextHeader indicates an expected call of NextHeader.
func (mr *MockHeaderSubMockRecorder) NextHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextHeader", reflect.TypeOf((*MockHeaderSub)(nil).NextHeader), arg0)
}
